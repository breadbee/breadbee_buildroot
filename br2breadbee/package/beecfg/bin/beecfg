#!/usr/bin/env python3

import locale
from dialog import Dialog
import subprocess

locale.setlocale(locale.LC_ALL, '')

d = Dialog(dialog="dialog", autowidgetsize=True)

d.setBackgroundTitle("BeeCfg for BreadBee")

MENU_PINMUX = "pinmux"
MENU_INTERFACES = "interfaces"
MENU_ACCESSORIES = "accessories"

CONNECTOR_J1 = "J1"
CONNECTOR_J2 = "J2"

PORT_I2C1 = "i2c1"
PORT_SPI0 = "spi0"
PORT_SAR = "sar"
PORT_FUART = "fuart"
PORT_SD = "sd"

port_connector_map = {
    PORT_I2C1: CONNECTOR_J2,
    PORT_SPI0: CONNECTOR_J2,
    PORT_SAR: CONNECTOR_J2,
    PORT_FUART: CONNECTOR_J2,
    PORT_SD: CONNECTOR_J1
}

FUNCTION_I2C1 = "i2c1"
FUNCTION_SPI0 = "spi0"
FUNCTION_SPI1 = "spi1"
FUNCTION_PWM0 = "pwm0"
FUNCTION_PWM1 = "pwm1"
FUNCTION_PWM2 = "pwm2"
FUNCTION_PWM3 = "pwm3"
FUNCTION_PWM4 = "pwm4"
FUNCTION_PWM5 = "pwm5"
FUNCTION_PWM6 = "pwm6"
FUNCTION_PWM7 = "pwm7"
FUNCTION_UART1 = "uart1"
FUNCTION_FUART = "fuart"

pinmux_config = {}

INTERFACE_SPIDEV = "spidev"
INTERFACE_W1 = "w1"

ACCESSORY_TSL2563 = "tsl2563"
ACCESSORY_MPU6050 = "mpu6050"
ACCESSORY_SSD1306 = "ssd1306"
ACCESSORY_DS1307 = "ds1307"
ACCESSORY_IR_RX = "ir_rx"
ACCESSORY_IR_TX = "ir_tx"

interface_possibilities = {
    INTERFACE_SPIDEV: ([
                           "spi0",
                           "spi1"
                       ], True),
    INTERFACE_W1: ([
                       "sr_io7"
                   ], False)
}

i2c1_accessory = ([
                      "i2c1"
                  ], True)

accessory_possibilities = {
    ACCESSORY_TSL2563: i2c1_accessory,
    ACCESSORY_MPU6050: i2c1_accessory,
    ACCESSORY_SSD1306: i2c1_accessory,
    ACCESSORY_DS1307: i2c1_accessory,
    ACCESSORY_IR_RX: (["pm_gpio4"], False),
    ACCESSORY_IR_TX: (["sr_io3"], False)
}

interface_config = []
accessory_config = []

pins_i2c1 = set([5, 6])
muxoptions_i2c1 = {
    FUNCTION_I2C1: pins_i2c1
}

pins_spi0 = set([7, 8, 9, 10])
muxoptions_spi0 = {
    FUNCTION_SPI0: pins_spi0,
    FUNCTION_PWM4: set([7]),
    FUNCTION_PWM5: set([8]),
    FUNCTION_PWM6: set([9]),
    FUNCTION_PWM7: set([10])
}

pins_sar = set([11, 12, 13, 14])
muxoptions_sar = {
    "asi0": set([14]),
    "asi1": set([13]),
    "asi2": set([11]),
    "asi3": set([12])
}

pins_fuart = set([15, 16, 17, 18])
muxoptions_fuart = {
    FUNCTION_SPI0: pins_fuart,
    FUNCTION_FUART: pins_fuart,
    FUNCTION_PWM0: set([15]),
    FUNCTION_PWM1: set([16]),
    FUNCTION_PWM2: set([17]),
    FUNCTION_PWM3: set([18]),
    FUNCTION_UART1: set([17, 18]),
}

pins_sd = set([2, 3, 4, 5, 6, 7])
muxoptions_sd = {
    FUNCTION_SPI1: set([2, 3, 4, 5])
}

muxoptions_map = {
    PORT_I2C1: muxoptions_i2c1,
    PORT_SPI0: muxoptions_spi0,
    PORT_SAR: muxoptions_sar,
    PORT_FUART: muxoptions_fuart,
    PORT_SD: muxoptions_sd
}

# this is for mapping the less uniform dts overlay
# names to the simpler functions we care about
overlay_exceptions = {
    FUNCTION_PWM0: {
        PORT_FUART: "pwm0_fuart_rx"
    },
    FUNCTION_PWM1: {
        PORT_FUART: "pwm1_fuart_tx"
    },
    FUNCTION_PWM2: {
        PORT_FUART: "pwm2_fuart_cts"
    },
    FUNCTION_PWM3: {
        PORT_FUART: "pwm3_fuart_rts"
    },
    FUNCTION_UART1: {
        PORT_FUART: "uart1_fuart_cts_rts"
    },
    FUNCTION_PWM4: {
        PORT_SPI0: "pwm4_spi0_cz"
    },
    FUNCTION_PWM5: {
        PORT_SPI0: "pwm5_spi0_ck"
    },
    FUNCTION_PWM6: {
        PORT_SPI0: "pwm5_spi0_di"
    },
    FUNCTION_PWM7: {
        PORT_SPI0: "pwm3_spi0_do"
    },
    FUNCTION_SPI1: {
        PORT_SD: "spi1_sd_d0_d1_d2_d3"
    }
}


def reload_config():
    pass


def add_function_on_port(function, port):
    pinmux_config[function] = port


def function_on_port(function, port):
    return function in pinmux_config and pinmux_config.get(function) == port


def remove_functions_from_port(port):
    deadlist = []
    for function in pinmux_config:
        if pinmux_config.get(function) == port:
            deadlist.append(function)
    for function in deadlist:
        pinmux_config.pop(function)


def update_config():
    sar_options = []
    overlays = []

    for peripheral in pinmux_config:
        port = pinmux_config.get(peripheral)
        if port == PORT_SAR:
            sar_options.append(peripheral.replace("asi", "sar_gpio"))
        else:
            if peripheral in overlay_exceptions and port in overlay_exceptions.get(peripheral):
                overlays.append(overlay_exceptions.get(peripheral).get(port))
            else:
                overlays.append("%s_%s" % (peripheral, port))

    if len(sar_options) > 0:
        overlays.append("%s_%s" % (PORT_SAR, "-".join(sar_options)))

    for interface in interface_config:
        overlays.append(interface)

    for accessory in accessory_config:
        overlays.append(accessory)

    newconfig = ""

    if len(overlays) > 0:
        newconfig = "#breadbee#" + "#".join(overlays)

    d.yesno(text=newconfig)

    try:
        subprocess.check_call(["fw_setenv", "bb_config", newconfig])
    except subprocess.CalledProcessError:
        pass


def add_muxoption_to_menu(menu, port, option, pins):
    menu.append(
        (option, "enable %s on %s %s of connector %s" % (
            option, "pins" if len(pins) > 1 else "pin", ", ".join(str(p) for p in pins), port_connector_map.get(port)),
         function_on_port(option, port)))


def create_menu(port):
    menu = []
    muxoptions = muxoptions_map.get(port)
    for mo in muxoptions:
        add_muxoption_to_menu(menu, port, mo, muxoptions.get(mo))
    return menu


def port_menu(port):
    menu = create_menu(port)
    while True:
        choice = d.checklist(text="%s port options\n\n Pins that are not allocated become GPIOs." % (port),
                             choices=menu)
        if choice[0] == Dialog.OK:
            setpins = True
            usedpins = set()
            for tag in choice[1]:
                option_pins = muxoptions_map.get(port).get(tag)
                if not usedpins.isdisjoint(option_pins):
                    d.yesno(text="Overlapping options are selected")
                    setpins = False
                    break
                elif (tag in pinmux_config) and (pinmux_config[tag] != port):
                    d.yesno(text="%s is already enabled on '%s' '%s'" % (tag, pinmux_config.get(tag), port))
                    setpins = False
                for p in option_pins:
                    usedpins.add(p)

            if not setpins:
                continue

            remove_functions_from_port(port)
            for tag in choice[1]:
                add_function_on_port(tag, port)

            update_config()

            break
        else:
            break


TXT_CHANGESAFTERREBOOT = "Configuration changes are written instantly but only take effect after rebooting."


def menu_pinmux():
    pinmuxmenu = []
    for port in muxoptions_map:
        port_pins = set()
        muxoptions = muxoptions_map.get(port)
        for opt in muxoptions:
            for p in muxoptions.get(opt):
                port_pins.add(p)
        pinmuxmenu.append((port, "%s pins %s" % (port_connector_map.get(port), ", ".join(str(p) for p in port_pins))))
    while True:
        choice = d.menu(
            text="Select the port to configure.\n\n" +
                 TXT_CHANGESAFTERREBOOT,
            choices=pinmuxmenu)
        if choice[0] == Dialog.OK:
            port_menu(choice[1])
        else:
            break


def build_interface_accessory_menu(possibilities, config):
    menu = []
    for thing in possibilities:
        requires_pinmux = possibilities.get(thing)[1]

        for plug in possibilities.get(thing)[0]:
            # skip any choices that require unselected pinmux functions
            if requires_pinmux and plug not in pinmux_config:
                continue
            dtb_name = "%s_on_%s" % (thing, plug)
            menu.append((dtb_name, "%s on %s" % (thing, plug), dtb_name in config))
    return menu


def menu_interfaces():
    global interface_config
    interface_menu = build_interface_accessory_menu(interface_possibilities, interface_config)

    while True:
        choice = d.checklist(
            text="Select the interfaces you want to enable.\n\n" +
                 TXT_CHANGESAFTERREBOOT,
            choices=interface_menu)
        if choice[0] == Dialog.OK:
            interface_config = choice[1]
            update_config()

        break


def menu_accessories():
    global accessory_config
    accessory_menu = build_interface_accessory_menu(accessory_possibilities, accessory_config)
    while True:
        choice = d.checklist(
            text="Select the accessories you want to enable.\n\n" +
                 TXT_CHANGESAFTERREBOOT,
            choices=accessory_menu)
        if choice[0] == Dialog.OK:
            accessory_config = choice[1]
            update_config()

        break


menus = {
    MENU_PINMUX: ("Select pinmux options", menu_pinmux),
    MENU_INTERFACES: ("Options for spidev, w1 etc and other interfaces", menu_interfaces),
    MENU_ACCESSORIES: ("Options for common accessories", menu_accessories)
}

TXT_MAINMENU = \
    "Welcome to BeeCfg"

if __name__ == '__main__':
    reload_config()
    mainmenu = []
    for mi in menus:
        mainmenu.append((mi, menus.get(mi)[0]))

    while True:
        try:
            choice = d.menu(text=TXT_MAINMENU, choices=mainmenu)
            if choice[0] == Dialog.OK:
                menus.get(choice[1])[1]()
            else:
                break
        except Exception as e:
            d.msgbox("Exception thrown: " + str(e))
            break
