#!/usr/bin/env python3

import locale
from dialog import Dialog
import subprocess

locale.setlocale(locale.LC_ALL, '')

d = Dialog(dialog="dialog", autowidgetsize=True)

d.setBackgroundTitle("BeeCfg for BreadBee")

peripheral_options = []
gpio_option_keys = ["gpio_i2c1", "gpio_spi0", "gpio_fuart"]
sar_option_map = {"sar0_sar": "sar_gpio0", "sar1_sar": "sar_gpio1", "sar2_sar": "sar_gpio2", "sar3_sar": "sar_gpio3"}


def setupdefaults():
    add_peripheral("gpio", "i2c1")
    add_peripheral("gpio", "spi0")
    add_peripheral("gpio", "fuart")


def add_peripheral(peripheral, port):
    peripheral_options.append(peripheral + "_" + port)


def remove_peripherals(port, menu):
    for mi in menu:
        option = mi[0] + "_" + port
        if option in peripheral_options:
            peripheral_options.remove(option)


def update_config():
    overlays = []
    sar_options = []
    for option in peripheral_options:
        # just strip gpio options
        if option in gpio_option_keys:
            continue
        # collect sar options for later
        elif option in sar_option_map:
            sar_options.append(sar_option_map.get(option))
        else:
            overlays.append(option)

    if len(sar_options) > 0:
        overlays.append("sar_" + "-".join(sar_options))

    newconfig = "#".join(overlays)
    subprocess.check_call(["fw_setenv", "bb_config", newconfig])


def peripheral_i2c1():
    menu = [("i2c1", "enable i2c on pins 5 and 6", "i2c1_i2c1" in peripheral_options),
            ("gpio", "enable gpio on pins 5 and 6", "gpio_i2c1" in peripheral_options)]
    choice = d.radiolist(text="i2c1 options", choices=menu)
    if choice[0] == Dialog.OK:
        remove_peripherals("i2c1", menu)
        add_peripheral(choice[1], "i2c1")
        update_config()


def peripheral_spi0():
    menu = [("jtag", "enable jtag on pins 7, 8, 9 and 10", "jtag_spi0" in peripheral_options),
            ("gpio", "enable gpio on pins 7, 8, 9 and 10", "gpio_spi0" in peripheral_options)]

    if not "spi0_fuart" in peripheral_options:
        menu.append(("spi0", "enable spi on pins 7, 8, 9 and 10", "spi0_spi0" in peripheral_options))

    choice = d.radiolist(text="spi0 options", choices=menu)
    if choice[0] == Dialog.OK:
        remove_peripherals("spi0", menu)
        add_peripheral(choice[1], "spi0")
        update_config()


def peripheral_sar():
    menu = [("sar0", "enable ADC on pin 14", "sar0_sar" in peripheral_options),
            ("sar1", "enable ADC on pin 13", "sar1_sar" in peripheral_options),
            ("sar2", "enable ADC on pin 11", "sar2_sar" in peripheral_options),
            ("sar3", "enable ADC on pin 12", "sar3_sar" in peripheral_options)]
    choice = d.checklist(text="sar options", choices=menu)
    if choice[0] == Dialog.OK:
        remove_peripherals("sar", menu)
        for tag in choice[1]:
            add_peripheral(tag, "sar")
        update_config()


def peripheral_fuart():
    menu = [("gpio", "enable gpio on pins 15, 16, 17 and 18", "gpio_fuart" in peripheral_options)]

    if not "spi0_spi0" in peripheral_options:
        menu.append(("spi0", "enable spi on pins 15, 16, 17 and 18", "spi0_fuart" in peripheral_options))

    choice = d.radiolist(text="fuart options", choices=menu)
    if choice[0] == Dialog.OK:
        remove_peripherals("fuart", menu)
        add_peripheral(choice[1], "fuart")
        update_config()


def peripherals():
    while True:
        pinmuxmenu = [("i2c1", "i2c1 - J2 pins 5 and 6"),
                      ("spi0", "spi0 - J2 pins 7, 8, 9 and 10"),
                      ("sar", "sar - J2 pins 11, 12, 13 and 14"),
                      ("fuart", "fuart - J2 pins 15, 16, 17 and 18")]
        pinmuxmenudict = {"i2c1": peripheral_i2c1, "spi0": peripheral_spi0, "sar": peripheral_sar,
                          "fuart": peripheral_fuart}
        choice = d.menu(text="Which port?", choices=pinmuxmenu)
        if choice[0] == Dialog.OK:
            pinmuxmenudict.get(choice[1], badoption)()
        else:
            break


def badoption():
    d.msgbox("Something terrible has happened")


if __name__ == '__main__':
    setupdefaults()
    mainmenu = [("peripherals", "Select peripheral options")]

    menudict = {"peripherals": peripherals}

    while True:
        try:
            choice = d.menu(text="Pick your poison", choices=mainmenu)
            if choice[0] == Dialog.OK:
                menudict.get(choice[1], badoption)()
            else:
                break
        except Exception as e:
            d.msgbox("Exception thrown: " + str(e))
            break
